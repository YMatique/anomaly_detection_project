# ==================== INSTALA√á√ÉO TENSORFLOW ====================

# OP√á√ÉO 1: Instala√ß√£o Autom√°tica (RECOMENDADA)
# Execute este comando no terminal:
pip install tensorflow

# Se der erro, tente:
pip install tensorflow-cpu

# OP√á√ÉO 2: Vers√µes espec√≠ficas que funcionam
pip install tensorflow==2.12.0
# OU
pip install tensorflow==2.10.0

# OP√á√ÉO 3: Para sistemas mais antigos
pip install tensorflow==2.8.0

# ==================== VERIFICAR PYTHON ====================
# Primeiro, verifique sua vers√£o do Python:
python --version

# TensorFlow funciona com:
# ‚úÖ Python 3.8, 3.9, 3.10, 3.11
# ‚ùå Python 3.12+ (n√£o suportado ainda)
# ‚ùå Python 3.7 ou menor

# ==================== SCRIPT INSTALA√á√ÉO COMPLETA ====================
# install_everything.py

"""
Script para instalar TUDO automaticamente
"""
import subprocess
import sys
import platform

def run_command(command):
    """Executa comando e retorna resultado"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def check_python_version():
    """Verifica vers√£o do Python"""
    version = sys.version_info
    print(f"Python {version.major}.{version.minor}.{version.micro}")
    
    if version.major != 3:
        print("‚ùå TensorFlow requer Python 3.x")
        return False
    
    if version.minor < 8:
        print("‚ùå TensorFlow requer Python 3.8+")
        return False
    
    if version.minor > 11:
        print("‚ö†Ô∏è Python 3.12+ pode ter problemas com TensorFlow")
        print("üí° Recomendado: Python 3.8-3.11")
    
    return True

def install_tensorflow():
    """Tenta instalar TensorFlow"""
    print("\nüîß Instalando TensorFlow...")
    
    # Lista de vers√µes para tentar
    versions = [
        "tensorflow",
        "tensorflow-cpu", 
        "tensorflow==2.12.0",
        "tensorflow==2.10.0",
        "tensorflow==2.8.0"
    ]
    
    for version in versions:
        print(f"üì¶ Tentando: {version}")
        success, stdout, stderr = run_command(f"pip install {version}")
        
        if success:
            print(f"‚úÖ {version} instalado!")
            
            # Testar import
            try:
                import tensorflow as tf
                print(f"‚úÖ TensorFlow {tf.__version__} funcionando!")
                return True
            except ImportError:
                print(f"‚ùå {version} instalado mas n√£o funciona")
                continue
        else:
            print(f"‚ùå Erro ao instalar {version}")
            if stderr:
                print(f"   Erro: {stderr[:200]}...")
    
    return False

def install_other_packages():
    """Instala outras depend√™ncias"""
    packages = [
        "opencv-python",
        "numpy", 
        "matplotlib",
        "scikit-learn",
        "pillow"
    ]
    
    print("\nüì¶ Instalando outras depend√™ncias...")
    
    for package in packages:
        print(f"üì¶ Instalando {package}...")
        success, _, _ = run_command(f"pip install {package}")
        
        if success:
            print(f"‚úÖ {package} OK")
        else:
            print(f"‚ùå {package} falhou")

def test_imports():
    """Testa todos os imports necess√°rios"""
    print("\nüß™ Testando imports...")
    
    packages = [
        ("tensorflow", "tf"),
        ("cv2", "opencv-python"),
        ("numpy", "numpy"),
        ("matplotlib", "matplotlib"),
        ("sklearn", "scikit-learn")
    ]
    
    results = {}
    
    for import_name, package_name in packages:
        try:
            if import_name == "tensorflow":
                import tensorflow as tf
                print(f"‚úÖ TensorFlow {tf.__version__}")
                results[package_name] = True
            elif import_name == "cv2":
                import cv2
                print(f"‚úÖ OpenCV {cv2.__version__}")
                results[package_name] = True
            elif import_name == "numpy":
                import numpy as np
                print(f"‚úÖ NumPy {np.__version__}")
                results[package_name] = True
            elif import_name == "matplotlib":
                import matplotlib
                print(f"‚úÖ Matplotlib {matplotlib.__version__}")
                results[package_name] = True
            elif import_name == "sklearn":
                import sklearn
                print(f"‚úÖ Scikit-learn {sklearn.__version__}")
                results[package_name] = True
        except ImportError:
            print(f"‚ùå {package_name} n√£o encontrado")
            results[package_name] = False
    
    return results

def main():
    print("üè† INSTALADOR AUTOM√ÅTICO")
    print("Sistema de Detec√ß√£o de Invas√µes")
    print("=" * 50)
    
    # Informa√ß√µes do sistema
    print(f"\nüíª Sistema: {platform.system()} {platform.release()}")
    print(f"üêç Python: {sys.version}")
    
    # Verificar Python
    if not check_python_version():
        print("\n‚ùå Vers√£o do Python incompat√≠vel!")
        print("üí° Instale Python 3.8-3.11 e tente novamente")
        return
    
    # Atualizar pip
    print("\nüì¶ Atualizando pip...")
    run_command("python -m pip install --upgrade pip")
    
    # Instalar TensorFlow
    tf_success = install_tensorflow()
    
    if not tf_success:
        print("\n‚ùå FALHA AO INSTALAR TENSORFLOW!")
        print("\nüí° SOLU√á√ïES ALTERNATIVAS:")
        print("1. Use Google Colab (gratuito, TensorFlow pr√©-instalado)")
        print("2. Instale Anaconda e use: conda install tensorflow")
        print("3. Use um ambiente virtual Python")
        return
    
    # Instalar outras depend√™ncias
    install_other_packages()
    
    # Testar tudo
    results = test_imports()
    
    # Resumo final
    print("\n" + "=" * 50)
    print("üìã RESUMO FINAL")
    print("=" * 50)
    
    success_count = sum(results.values())
    total_count = len(results)
    
    if success_count == total_count:
        print("üéâ TUDO INSTALADO COM SUCESSO!")
        print("‚úÖ Voc√™ pode executar o sistema agora!")
        print("\nüöÄ Para come√ßar:")
        print("   python main.py --mode train")
    else:
        print(f"‚ö†Ô∏è {total_count - success_count} depend√™ncias falharam")
        print("\nüîß Pacotes que falharam:")
        for package, success in results.items():
            if not success:
                print(f"   ‚ùå {package}")

if __name__ == "__main__":
    main()

# ==================== COMANDOS MANUAIS ====================

# Se o script autom√°tico n√£o funcionar, tente estes comandos manualmente:

# 1. Atualizar pip
python -m pip install --upgrade pip

# 2. Instalar TensorFlow (tente na ordem):
pip install tensorflow
# OU
pip install tensorflow-cpu
# OU  
pip install tensorflow==2.12.0

# 3. Instalar outras depend√™ncias
pip install opencv-python numpy matplotlib scikit-learn pillow

# 4. Verificar instala√ß√£o
python -c "import tensorflow as tf; print('TensorFlow:', tf.__version__)"
python -c "import cv2; print('OpenCV:', cv2.__version__)"

# ==================== ALTERNATIVAS ====================

# OP√á√ÉO A: Usar Google Colab
# 1. V√° para colab.research.google.com
# 2. TensorFlow j√° vem instalado
# 3. Upload seu c√≥digo e execute l√°

# OP√á√ÉO B: Usar Anaconda
# 1. Instale Anaconda
# 2. conda create -n invasao python=3.9
# 3. conda activate invasao  
# 4. conda install tensorflow opencv

# OP√á√ÉO C: Ambiente Virtual
# 1. python -m venv venv_invasao
# 2. venv_invasao\Scripts\activate  (Windows)
# 3. pip install tensorflow opencv-python numpy

# ==================== VERS√ÉO SEM TENSORFLOW ====================
# Se nada funcionar, posso criar uma vers√£o usando s√≥ OpenCV
# para processamento b√°sico de imagem (sem deep learning)

"""
Version without TensorFlow (OpenCV only)
Para casos extremos onde TensorFlow n√£o instala
"""

import cv2
import numpy as np
from collections import deque
import time
import os

class SimpleMotionDetector:
    """Detector simples baseado em diferen√ßa de frames"""
    
    def __init__(self, threshold=30):
        self.threshold = threshold
        self.background = None
        self.frame_buffer = deque(maxlen=10)
        
    def detect_motion(self, frame):
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        gray = cv2.GaussianBlur(gray, (21, 21), 0)
        
        if self.background is None:
            self.background = gray
            return False, 0
        
        # Diferen√ßa com background
        frame_delta = cv2.absdiff(self.background, gray)
        thresh = cv2.threshold(frame_delta, 25, 255, cv2.THRESH_BINARY)[1]
        
        # Dilata√ß√£o para preencher buracos
        thresh = cv2.dilate(thresh, None, iterations=2)
        
        # Encontrar contornos
        contours, _ = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        # Calcular √°rea total de movimento
        total_area = sum(cv2.contourArea(c) for c in contours if cv2.contourArea(c) > 500)
        
        # Atualizar background lentamente
        self.background = cv2.addWeighted(self.background, 0.95, gray, 0.05, 0)
        
        is_anomaly = total_area > self.threshold * 1000
        return is_anomaly, total_area

def simple_detection_opencv():
    """Detec√ß√£o simples usando apenas OpenCV"""
    print("üîç Detector Simples (Apenas OpenCV)")
    print("Detecta movimentos grandes/an√¥malos")
    print("Pressione 'q' para sair")
    
    detector = SimpleMotionDetector(threshold=50)
    cap = cv2.VideoCapture(0)
    
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        
        is_anomaly, motion_area = detector.detect_motion(frame)
        
        # Visualiza√ß√£o
        color = (0, 0, 255) if is_anomaly else (0, 255, 0)
        status = "MOVIMENTO AN√îMALO!" if is_anomaly else "Normal"
        
        cv2.putText(frame, status, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)
        cv2.putText(frame, f"√Årea: {motion_area:.0f}", (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        
        cv2.imshow('Detector Simples (OpenCV)', frame)
        
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    cap.release()
    cv2.destroyAllWindows()

# Para usar o detector simples:
# simple_detection_opencv()